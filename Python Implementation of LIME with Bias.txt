# Importing the Essential Librariesimport numpy as np # linear algebraimport pandas as pdfrom sklearn.preprocessing import MinMaxScalerfrom sklearn.metrics import confusion_matrix, classification_reportimport seaborn as snfrom sklearn.model_selection import train_test_splitfrom sklearn import preprocessing, neighbors, svmfrom sklearn.linear_model import LogisticRegression from sklearn.ensemble import RandomForestClassifierfrom sklearn.svm import SVC #importing the support vector machinefrom sklearn.naive_bayes import GaussianNBimport matplotlib.pyplot as pltimport seaborn as snimport warningswarnings.filterwarnings('ignore')# Importing the datasetdf = pd.read_csv("Ben_Poly_Numeric.csv")# Head view of the datasetdf.head(3)# Acquiring information on the datasetdf.info()# Shape viewing the datasetdf.shape# Checking for null or NAs valuesdf.isnull().sum() # checking columns for NAs# dropping null or NAs valuesdf = df.dropna()# checking columns for NAsdf.isnull().sum()# Visualizing for all variable with histogramplt.figure()columns = df.columns # creating histogram to visualize the variablesfor col in columns:    print('col: ', col)    df[col].hist()    plt.show()# Removing Age in datasetplt.figure()sn.boxplot(data=df, y='Age', x='Admission_Status')plt.show()df[(df['Age']< 15)]df.drop([21, 175, 177, 179, 180, 183, 185, 189, 283, 410, 462, 696, 970, 1142, 1356], inplace=True)# Confirming that the outliers on Age are removedplt.figure()sn.boxplot(data=df, y='Age', x='Admission_Status')plt.show()# Confirming the Age outliers are removed in the datasetdf['Age'].describe()# Building predictive modeldf.head(2)X3 = df.drop(['Admission Status', 'Admission_Status'], axis=1)X3.head(2)y = df['Admission_Status']# dataset slpliting into train and testX_train, X_test, y_train, y_test = train_test_split(X3,y, test_size=0.30, random_state=0)model = GaussianNB()model.fit(X_train, y_train)accuracy = model.score(X_test, y_test)accuracy*100prediction = model.predict(X_test)cm = confusion_matrix(y_test, prediction)plt.figure()sn.heatmap(cm, annot=True)plt.show()crp = classification_report(y_test, prediction)print(crp)# Importing LIME and Implementing LIMEfrom interpret import showfrom interpret.blackbox import LimeTabularfrom sklearn.metrics import f1_score, accuracy_scorefrom lime import lime_tabularimport randomfrom IPython.display import HTMLimport limefeature_names = X3lime = LimeTabular(model, data=X_train, feature_names=feature_names, random_state=1)Lime_local = lime.explain_local(X_test[0:5], y_test[0:5], name='LIME')show(Lime_local)